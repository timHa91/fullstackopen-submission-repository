{"ast":null,"code":"var _jsxFileName = \"/Users/timhartmann/Desktop/fullstackopen-submission-repository/part1/unicafe/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const incrementGood = () => setGood(good + 1);\n\n  const incrementNeutral = () => setNeutral(neutral + 1);\n\n  const incrementBad = () => setBad(bad + 1);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"give feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: incrementGood,\n      text: \"good\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: incrementNeutral,\n      text: \"neutral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: incrementBad,\n      text: \"bad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      good: good,\n      neutral: neutral,\n      bad: bad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n\n_c = App;\n\nconst Button = _ref => {\n  let {\n    handleClick,\n    text\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleClick,\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 43\n  }, this);\n};\n\n_c2 = Button;\n\nconst Statistics = props => {\n  const all = props.good + props.neutral + props.bad;\n  let positive = 0;\n  let average = 0;\n\n  if (all > 0) {\n    positive = props.good / all * 100;\n    average = (props.good - props.bad) / all;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n        text: \"good\",\n        value: props.good\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"good \", props.good]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"neutral \", props.neutral]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"bad \", props.bad]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"all \", all]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"average \", average]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"positive \", positive, \" %\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No feedback given\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_c3 = Statistics;\n\nconst StatisticLine = _ref2 => {\n  let {\n    props\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [propbs.text, \" \", props.value]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_c4 = StatisticLine;\nexport default App;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Button\");\n$RefreshReg$(_c3, \"Statistics\");\n$RefreshReg$(_c4, \"StatisticLine\");","map":{"version":3,"sources":["/Users/timhartmann/Desktop/fullstackopen-submission-repository/part1/unicafe/src/App.js"],"names":["useState","App","good","setGood","neutral","setNeutral","bad","setBad","incrementGood","incrementNeutral","incrementBad","Button","handleClick","text","Statistics","props","all","positive","average","StatisticLine","propbs","value"],"mappings":"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","sourcesContent":["import { useState } from 'react'\n\nconst App = () => {\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  const incrementGood = () => setGood(good + 1);\n  const incrementNeutral = () => setNeutral(neutral + 1);\n  const incrementBad = () => setBad(bad + 1);\n\n  return (\n    <div>\n      <h1>give feedback</h1>\n      <Button handleClick={incrementGood} text={\"good\"} />\n      <Button handleClick={incrementNeutral} text={\"neutral\"} />\n      <Button handleClick={incrementBad} text={\"bad\"} />\n      <Statistics good={good} neutral={neutral} bad={bad} />\n    </div>\n  )\n}\n\nconst Button = ({ handleClick, text }) => <button onClick={handleClick}>{text}</button>\n\nconst Statistics = (props) => {\n  const all = props.good + props.neutral + props.bad\n  let positive = 0;\n  let average = 0;\n\n  if (all > 0) {\n    positive = (props.good / all) * 100\n    average = (props.good - props.bad) / all\n\n    return (\n      <div>\n        <h1>statistics</h1>\n        <StatisticLine text=\"good\" value={props.good} />\n        <p>good {props.good}</p>\n        <p>neutral {props.neutral}</p>\n        <p>bad {props.bad}</p>\n        <p>all {all}</p>\n        <p>average {average}</p>\n        <p>positive {positive} %</p>\n      </div>\n    )\n  }\n  else {\n    return (\n      <div>\n        <h1>statistics</h1>\n        <p>No feedback given</p>\n      </div>\n    )\n  }\n}\n\nconst StatisticLine = ({props}) => {\n  return (\n    <p>{propbs.text} {props.value}</p>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}